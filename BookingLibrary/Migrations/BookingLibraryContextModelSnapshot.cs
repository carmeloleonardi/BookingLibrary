// <auto-generated />
using System;
using BookingLibrary.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BookingLibrary.Migrations
{
    [DbContext(typeof(BookingLibraryContext))]
    partial class BookingLibraryContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BookingLibrary.Models.Author", b =>
                {
                    b.Property<int>("AuthorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AuthorId");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            AuthorId = 1,
                            FirstName = "Italo",
                            LastName = "Calvivo"
                        },
                        new
                        {
                            AuthorId = 2,
                            FirstName = "Italo",
                            LastName = "Svevo"
                        },
                        new
                        {
                            AuthorId = 3,
                            FirstName = "Martin",
                            LastName = "Fowler"
                        },
                        new
                        {
                            AuthorId = 4,
                            FirstName = "Erich",
                            LastName = "Gamma"
                        },
                        new
                        {
                            AuthorId = 5,
                            FirstName = "Richard",
                            LastName = "Helm"
                        },
                        new
                        {
                            AuthorId = 6,
                            FirstName = "Ralph",
                            LastName = "Johnson"
                        },
                        new
                        {
                            AuthorId = 7,
                            FirstName = "John",
                            LastName = "Vlissides"
                        });
                });

            modelBuilder.Entity("BookingLibrary.Models.AuthorBiography", b =>
                {
                    b.Property<int>("AuthorBiographyId")
                        .HasColumnType("int");

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nationality")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AuthorBiographyId");

                    b.ToTable("AuthorBiographies");

                    b.HasData(
                        new
                        {
                            AuthorBiographyId = 1,
                            AuthorId = 3,
                            DateOfBirth = new DateTime(1963, 12, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Together with Kent Beck he was one of the fathers of extreme programming and agile software development. He is a member of the Agile Alliance and one of the authors of the Agile Manifesto. Among his most influential works we can mention UML Distilled on the UML language and Refactoring: Improving the Design of Existing Code which introduced the concept of refactoring, today among the cornerstones of agile and test driven development methodologies. He introduced the concept of dependency injection, widely used in the practice of developing automated tests.",
                            Nationality = "England"
                        });
                });

            modelBuilder.Entity("BookingLibrary.Models.AuthorBook", b =>
                {
                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.HasKey("AuthorId", "BookId");

                    b.HasIndex("BookId");

                    b.ToTable("AuthorBooks");

                    b.HasData(
                        new
                        {
                            AuthorId = 1,
                            BookId = 1
                        },
                        new
                        {
                            AuthorId = 1,
                            BookId = 2
                        },
                        new
                        {
                            AuthorId = 1,
                            BookId = 3
                        },
                        new
                        {
                            AuthorId = 2,
                            BookId = 4
                        },
                        new
                        {
                            AuthorId = 3,
                            BookId = 5
                        },
                        new
                        {
                            AuthorId = 4,
                            BookId = 6
                        },
                        new
                        {
                            AuthorId = 5,
                            BookId = 6
                        },
                        new
                        {
                            AuthorId = 6,
                            BookId = 6
                        },
                        new
                        {
                            AuthorId = 7,
                            BookId = 6
                        });
                });

            modelBuilder.Entity("BookingLibrary.Models.Book", b =>
                {
                    b.Property<int>("BookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("EditorId")
                        .HasColumnType("int");

                    b.Property<string>("Isbn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BookId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("EditorId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            BookId = 1,
                            CategoryId = 1,
                            EditorId = 3,
                            Isbn = "5ab6829o",
                            Price = 13.5m,
                            Title = "Il sentiero dei nidi di ragno"
                        },
                        new
                        {
                            BookId = 2,
                            CategoryId = 1,
                            EditorId = 3,
                            Isbn = "7493b423",
                            Price = 12.2m,
                            Title = "Il barone rampante"
                        },
                        new
                        {
                            BookId = 3,
                            CategoryId = 1,
                            EditorId = 3,
                            Isbn = "6283472992a",
                            Price = 13.5m,
                            Title = "Il visconte dimezzato"
                        },
                        new
                        {
                            BookId = 4,
                            CategoryId = 1,
                            EditorId = 3,
                            Isbn = "3738347383",
                            Price = 17.5m,
                            Title = "La coscienza di Zeno"
                        },
                        new
                        {
                            BookId = 5,
                            CategoryId = 2,
                            EditorId = 4,
                            Isbn = "127238437",
                            Price = 24.5m,
                            Title = "UML distilled"
                        },
                        new
                        {
                            BookId = 6,
                            CategoryId = 2,
                            EditorId = 4,
                            Isbn = "887192150X",
                            Price = 39m,
                            Title = "Design Patterns"
                        });
                });

            modelBuilder.Entity("BookingLibrary.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CategoryName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            CategoryName = "Narrative"
                        },
                        new
                        {
                            CategoryId = 2,
                            CategoryName = "Computer Science"
                        },
                        new
                        {
                            CategoryId = 3,
                            CategoryName = "Thriller"
                        },
                        new
                        {
                            CategoryId = 4,
                            CategoryName = "Horror"
                        },
                        new
                        {
                            CategoryId = 5,
                            CategoryName = "Romantic"
                        },
                        new
                        {
                            CategoryId = 6,
                            CategoryName = "Crime"
                        });
                });

            modelBuilder.Entity("BookingLibrary.Models.Editor", b =>
                {
                    b.Property<int>("EditorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EditorName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EditorId");

                    b.ToTable("Editors");

                    b.HasData(
                        new
                        {
                            EditorId = 1,
                            EditorName = "Rizzoli"
                        },
                        new
                        {
                            EditorId = 2,
                            EditorName = "PACKT"
                        },
                        new
                        {
                            EditorId = 3,
                            EditorName = "Mondadori"
                        },
                        new
                        {
                            EditorId = 4,
                            EditorName = "PEARSON Addison Wesley"
                        },
                        new
                        {
                            EditorId = 5,
                            EditorName = "Mondadori"
                        });
                });

            modelBuilder.Entity("BookingLibrary.Models.AuthorBiography", b =>
                {
                    b.HasOne("BookingLibrary.Models.Author", "Author")
                        .WithOne("Biography")
                        .HasForeignKey("BookingLibrary.Models.AuthorBiography", "AuthorBiographyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookingLibrary.Models.AuthorBook", b =>
                {
                    b.HasOne("BookingLibrary.Models.Author", "Author")
                        .WithMany("AuthorBooks")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookingLibrary.Models.Book", "Book")
                        .WithMany("AuthorBooks")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookingLibrary.Models.Book", b =>
                {
                    b.HasOne("BookingLibrary.Models.Category", "Category")
                        .WithMany("Books")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookingLibrary.Models.Editor", "Editor")
                        .WithMany("BooksPublished")
                        .HasForeignKey("EditorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
